name: Azure Pipelines
variables:
  python.version: '3.7.6'
  azureSubscription: 'ca6bf114-878c-4d50-9b6b-b6f40d07ea0d'
  azureServiceConnectionId: 'Web-AppService'
  azureLocation: 'West US'
  terraformWorkingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
  terraformVersion: '0.12.25'
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
    steps:
    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDrI9HUIMN2FfgdGBXNePK37dQMZSLhBXEZTfaqmTVFBEn9O8KHoWthurJd4+OOxFemhQrG6kpo9KPL9hMQTkD3DpkfQ88V+UvLg/BimzxsIbz+EnLSj9QAtNaHkAiUjRMWPvbPp8ULZivSvxHanMedDSrsHb0UFs0oV+/DrddatSavQXS6Hgae4T62xMchl4Nj4SXgQ03jUtUjiIEOxWJCSIV4TDEvVeTW828jlykSabr9T/68dqaBQytJ6DX2czVdzAuFQTrrneWuQAdfzKn9gObQCd90n6j4wDotH0QGCqL85yFSKvoPPvaollWTlT2qyIUHBAbxpatkitwFnpFbD/iW8lAUKPORtArVQFaDdImsNy5Wv6IPhVqBAwbj1Yr0d+++JBPa4fHW2HWVhS9E38PJ/yjvVXUBQdw9L1S15SORsOy4i8c6XGiNxB3Og7qgxRLiBLCPbMAzLSDjYYSTdkq2zCwijruttL1p0xrlT1jYI/jGDdmSjrrNUtNui2M= bipin@DESKTOP-TKDUO55'
        sshKeySecureFile: 'devops'
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: $(terraformVersion)
    - task: TerraformCLI@0
      displayName: 'Run terraform init'
      inputs:
        command: init
        workingDirectory: './terraform' 
    - task: TerraformCLI@0
      displayName: 'Run terraform validate'
      inputs:
        command: validate
        workingDirectory: $(terraformWorkingDirectory)
    - task: TerraformCLI@0
      displayName: 'Run terraform plan'
      inputs:
        command: plan -out solution.plan
        workingDirectory: $(terraformWorkingDirectory)
        environmentServiceName: $(azureSubscription)
        commandOptions: -var location=$(azureLocation)
    - task: TerraformCLI@0
      displayName: 'Apply terraform plan'
      inputs:
        command: apply
        workingDirectory: $(terraformWorkingDirectory)
        environmentServiceName: $(azureSubscription)
        commandOptions: -var location=$(azureLocation)
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: './fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)
    - task: CmdLine@2
      displayName: Run Regression Tests Starter API 
      continueOnError: true
      inputs:
        script: 'newman run StarterAPIs.json'
        workingDirectory: './automatedtesting/postman' 
    - task: Bash@3
      displayName: "Run Postman tests"
      inputs:
          targetType: "inline"
          workingDirectory: './automatedtesting/postman'
          script: |
            #! /bin/bash
           
            sudo apt-get upgrade -y
            sudo npm install -g newman reporter
            sudo rm -rf newman/*
            
            newman run RegressionTestSuite.json -e MyEnvironment.json --reporters cli,junit
            newman run DataValidationTestSuite.json -e MyEnvironment.json --reporters cli,junit

    - task: ArchiveFiles@2
      displayName: "Archive Project Solution"
      inputs:
        rootFolderOrFile: "./"
        includeRootFolder: true
        archiveType: "zip"
        archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-project-solution.zip"
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-project-solution.zip
      displayName: "Upload Package"
      artifact: drop-project-solution

- stage:
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'ensurequalityrelease'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(azureServiceConnectionId)
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  - deployment: VMDeploy
    displayName: TestEnvrionement
    environment:
      name:  VMDeploy
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y                
                sudo apt-get install -y chromium-browser               
                sudo apt install default-jre -y

                pip3 install selenium
                sudo npm install selenium-webdriver
                export PATH=$PATH:/usr/bin/chromium-browser

                # Install jmeter
                cd /home/bipinsa
                wget http://www.gtlib.gatech.edu/pub/apache/jmeter/binaries/apache-jmeter-5.4.1.tgz
                tar xf apache-jmeter-5.4.1.tgz
                sudo ln -s -f /home/bipinsa/apache-jmeter-5.4.1/bin/jmeter /usr/bin/jmeter

          - task: ExtractFiles@1
            inputs:
              archiveFilePatterns: "$(Pipeline.Workspace)/drop-project-solution/$(Build.BuildId)-project-solution.zip"
              destinationFolder: "$(Pipeline.Workspace)/project-solution"
              cleanDestinationFolder: true
          - task: Bash@3
            displayName: "Run Selenium tests"
            inputs:
              targetType: "inline"
              script: |
                #! /bin/bash

                npm notice created a lockfile as package-lock.json. You should commit this file.
                
                python3 "$(Pipeline.Workspace)/project-solution/s/automatedtesting/selenium/functional-ui-testing.py"
          - task: Bash@3
            displayName: "Run Jmeter tests"
            inputs:
              targetType: "inline"
              script: |
                #! /bin/bash
                
                cd "$(Pipeline.Workspace)/project-solution/s/automatedtesting/jmeter"
                
                # Stress Tests
                mkdir stress_test_report		  
                rm -rf *.csv stress_test_report/*		  
                jmeter -n -t StressTestSuite.jmx -l StressTestResults.csv -e -o stress_test_report/
                
                #Endurance Tests
                mkdir endurance_test_report
                rm -rf *.csv endurance_test_report/*		  
                jmeter -n -t EnduranceTestSuite.jmx -l EnduranceTestResults.csv -e -o endurance_test_report/